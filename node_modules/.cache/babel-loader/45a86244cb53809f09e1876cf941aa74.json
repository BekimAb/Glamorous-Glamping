{"ast":null,"code":"import add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n * @throws {RangeError} The start of an interval cannot be after its end\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n\n  if (start > end) {\n    throw new RangeError('The start of an interval cannot be after its end');\n  }\n\n  var duration = {\n    years: differenceInYears(end, start)\n  };\n  var remainingMonths = add(start, {\n    years: duration.years\n  });\n  duration.months = differenceInMonths(end, remainingMonths);\n  var remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  duration.days = differenceInDays(end, remainingDays);\n  var remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  duration.hours = differenceInHours(end, remainingHours);\n  var remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  duration.minutes = differenceInMinutes(end, remainingMinutes);\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  duration.seconds = differenceInSeconds(end, remainingSeconds);\n  return duration;\n}","map":{"version":3,"sources":["/Users/robertvelez/Desktop/PROJECT3/Glamorous-Glamping/node_modules/date-fns/esm/intervalToDuration/index.js"],"names":["add","differenceInDays","differenceInHours","differenceInMinutes","differenceInMonths","differenceInSeconds","differenceInYears","toDate","requiredArgs","intervalToDuration","interval","arguments","start","end","isNaN","getTime","RangeError","duration","years","remainingMonths","months","remainingDays","days","remainingHours","hours","remainingMinutes","minutes","remainingSeconds","seconds"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACnDF,EAAAA,YAAY,CAAC,CAAD,EAAIG,SAAJ,CAAZ;AACA,MAAIC,KAAK,GAAGL,MAAM,CAACG,QAAQ,CAACE,KAAV,CAAlB;AACA,MAAIC,GAAG,GAAGN,MAAM,CAACG,QAAQ,CAACG,GAAV,CAAhB;AACA,MAAIC,KAAK,CAACF,KAAK,CAACG,OAAN,EAAD,CAAT,EAA4B,MAAM,IAAIC,UAAJ,CAAe,uBAAf,CAAN;AAC5B,MAAIF,KAAK,CAACD,GAAG,CAACE,OAAJ,EAAD,CAAT,EAA0B,MAAM,IAAIC,UAAJ,CAAe,qBAAf,CAAN;;AAE1B,MAAIJ,KAAK,GAAGC,GAAZ,EAAiB;AACf,UAAM,IAAIG,UAAJ,CAAe,kDAAf,CAAN;AACD;;AAED,MAAIC,QAAQ,GAAG;AACbC,IAAAA,KAAK,EAAEZ,iBAAiB,CAACO,GAAD,EAAMD,KAAN;AADX,GAAf;AAGA,MAAIO,eAAe,GAAGnB,GAAG,CAACY,KAAD,EAAQ;AAC/BM,IAAAA,KAAK,EAAED,QAAQ,CAACC;AADe,GAAR,CAAzB;AAGAD,EAAAA,QAAQ,CAACG,MAAT,GAAkBhB,kBAAkB,CAACS,GAAD,EAAMM,eAAN,CAApC;AACA,MAAIE,aAAa,GAAGrB,GAAG,CAACmB,eAAD,EAAkB;AACvCC,IAAAA,MAAM,EAAEH,QAAQ,CAACG;AADsB,GAAlB,CAAvB;AAGAH,EAAAA,QAAQ,CAACK,IAAT,GAAgBrB,gBAAgB,CAACY,GAAD,EAAMQ,aAAN,CAAhC;AACA,MAAIE,cAAc,GAAGvB,GAAG,CAACqB,aAAD,EAAgB;AACtCC,IAAAA,IAAI,EAAEL,QAAQ,CAACK;AADuB,GAAhB,CAAxB;AAGAL,EAAAA,QAAQ,CAACO,KAAT,GAAiBtB,iBAAiB,CAACW,GAAD,EAAMU,cAAN,CAAlC;AACA,MAAIE,gBAAgB,GAAGzB,GAAG,CAACuB,cAAD,EAAiB;AACzCC,IAAAA,KAAK,EAAEP,QAAQ,CAACO;AADyB,GAAjB,CAA1B;AAGAP,EAAAA,QAAQ,CAACS,OAAT,GAAmBvB,mBAAmB,CAACU,GAAD,EAAMY,gBAAN,CAAtC;AACA,MAAIE,gBAAgB,GAAG3B,GAAG,CAACyB,gBAAD,EAAmB;AAC3CC,IAAAA,OAAO,EAAET,QAAQ,CAACS;AADyB,GAAnB,CAA1B;AAGAT,EAAAA,QAAQ,CAACW,OAAT,GAAmBvB,mBAAmB,CAACQ,GAAD,EAAMc,gBAAN,CAAtC;AACA,SAAOV,QAAP;AACD","sourcesContent":["import add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n * @throws {RangeError} The start of an interval cannot be after its end\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n\n  if (start > end) {\n    throw new RangeError('The start of an interval cannot be after its end');\n  }\n\n  var duration = {\n    years: differenceInYears(end, start)\n  };\n  var remainingMonths = add(start, {\n    years: duration.years\n  });\n  duration.months = differenceInMonths(end, remainingMonths);\n  var remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  duration.days = differenceInDays(end, remainingDays);\n  var remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  duration.hours = differenceInHours(end, remainingHours);\n  var remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  duration.minutes = differenceInMinutes(end, remainingMinutes);\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  duration.seconds = differenceInSeconds(end, remainingSeconds);\n  return duration;\n}"]},"metadata":{},"sourceType":"module"}