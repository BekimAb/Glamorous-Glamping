{"ast":null,"code":"import toDate from \"../toDate/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(date, options) {\n  var _options$format, _options$representati;\n\n  requiredArgs(1, arguments);\n  var originalDate = toDate(date);\n\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["C:/Users/chika/RUT-VIRT-BO-FSF-PT-02-2022-U-B/projects/project-3/Glamorous-Glamping/node_modules/date-fns/esm/formatISO/index.js"],"names":["toDate","addLeadingZeros","requiredArgs","formatISO","date","options","_options$format","_options$representati","arguments","originalDate","isNaN","getTime","RangeError","format","String","representation","result","tzOffset","dateDelimiter","timeDelimiter","day","getDate","month","getMonth","year","getFullYear","concat","offset","getTimezoneOffset","absoluteOffset","Math","abs","hourOffset","floor","minuteOffset","sign","hour","getHours","minute","getMinutes","second","getSeconds","separator","time","join"],"mappings":"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","sourcesContent":["import toDate from \"../toDate/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with local time zone, or both.\n * @returns {String} the formatted date string (in local time zone)\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.representation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(date, options) {\n  var _options$format, _options$representati;\n\n  requiredArgs(1, arguments);\n  var originalDate = toDate(date);\n\n  if (isNaN(originalDate.getTime())) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var format = String((_options$format = options === null || options === void 0 ? void 0 : options.format) !== null && _options$format !== void 0 ? _options$format : 'extended');\n  var representation = String((_options$representati = options === null || options === void 0 ? void 0 : options.representation) !== null && _options$representati !== void 0 ? _options$representati : 'complete');\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}"]},"metadata":{},"sourceType":"module"}