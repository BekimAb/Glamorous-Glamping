{"ast":null,"code":"import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale;\n\n  requiredArgs(2, arguments);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = assign(cloneObject(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options !== null && options !== void 0 && options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","map":{"version":3,"sources":["/Users/robertvelez/Desktop/PROJECT3/Glamorous-Glamping/node_modules/date-fns/esm/formatDistance/index.js"],"names":["getDefaultOptions","compareAsc","differenceInMonths","differenceInSeconds","defaultLocale","toDate","cloneObject","assign","getTimezoneOffsetInMilliseconds","requiredArgs","MINUTES_IN_DAY","MINUTES_IN_ALMOST_TWO_DAYS","MINUTES_IN_MONTH","MINUTES_IN_TWO_MONTHS","formatDistance","dirtyDate","dirtyBaseDate","options","_ref","_options$locale","arguments","defaultOptions","locale","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","dateLeft","dateRight","seconds","offsetInSeconds","minutes","Math","round","months","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","floor"],"mappings":"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","sourcesContent":["import { getDefaultOptions } from \"../_lib/defaultOptions/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../_lib/defaultLocale/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport assign from \"../_lib/assign/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, options) {\n  var _ref, _options$locale;\n\n  requiredArgs(2, arguments);\n  var defaultOptions = getDefaultOptions();\n  var locale = (_ref = (_options$locale = options === null || options === void 0 ? void 0 : options.locale) !== null && _options$locale !== void 0 ? _options$locale : defaultOptions.locale) !== null && _ref !== void 0 ? _ref : defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = assign(cloneObject(options), {\n    addSuffix: Boolean(options === null || options === void 0 ? void 0 : options.addSuffix),\n    comparison: comparison\n  });\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options !== null && options !== void 0 && options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}